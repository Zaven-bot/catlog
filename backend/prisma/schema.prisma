generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  password  String
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  animeList UserAnime[]
}

model UserAnime {
  id              Int         @id @default(autoincrement())
  userId          Int
  animeId         Int
  status          AnimeStatus @default(PLAN_TO_WATCH)
  personalRating  Int?        @db.SmallInt
  notes           String?
  episodesWatched Int?        @default(0)
  startDate       DateTime?
  completedDate   DateTime?
  isFavorite      Boolean     @default(false)
  tags            String[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  anime           Anime       @relation(fields: [animeId], references: [id])
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
}

model Anime {
  id           Int         @id @default(autoincrement())
  malId        Int         @unique
  title        String
  titleEnglish String?
  description  String?
  imageUrl     String?
  genres       String[]
  episodes     Int?
  status       String
  score        Float?
  year         Int?
  rating       String?
  studios      String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userAnime    UserAnime[]
}

// ETL Pipeline Tables
model RawAnimeData {
  id            Int      @id @default(autoincrement())
  malId         Int
  rawJson       Json
  sourceApi     String   @default("jikan")
  ingestedAt    DateTime @default(now())
  etlRunId      String
}

model ProcessedAnime {
  id            Int      @id @default(autoincrement())
  malId         Int      @unique
  title         String
  titleEnglish  String?
  genres        String[]
  score         Float?
  members       Int?
  popularity    Int?
  rank          Int?
  airedFrom     DateTime?
  airedTo       DateTime?
  status        String
  episodes      Int?
  duration      String?
  rating        String?
  studios       String[]
  year          Int?
  season        String?
  imageUrl      String?
  synopsis      String?
  processedAt   DateTime @default(now())
  etlRunId      String
}

model EtlLogs {
  id           Int      @id @default(autoincrement())
  runId        String   @unique
  startTime    DateTime
  endTime      DateTime?
  status       String   // SUCCESS, FAILED, RUNNING
  rowsProcessed Int?
  errorMessage String?
  pipelineStep String   // EXTRACT, TRANSFORM, LOAD
  createdAt    DateTime @default(now())
}

// Live Streaming Data Table
model LivePopularity {
  id           Int      @id @default(autoincrement())
  malId        Int      
  title        String
  currentScore Float?
  liveMembers  Int?
  trendingRank Int?
  popularityChange Float? // Percentage change
  lastUpdate   DateTime @default(now())
  eventType    String   // SCORE_UPDATE, MEMBER_UPDATE, TRENDING_CHANGE
  
  @@index([malId])
  @@index([lastUpdate])
}

enum AnimeStatus {
  WATCHING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_WATCH
}
